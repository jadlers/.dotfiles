#!/bin/sh
# Simple To-Do list where each To-Do is described on a single line.

# Use user defined $SIMPLE_TODO_FILE or use fallback
TODO_FILE="${SIMPLE_TODO_FILE:-$XDG_DATA_HOME/jadlers/todo}"
# Make sure the TODO_FILE exists
[ -f "$TODO_FILE" ] || touch "$TODO_FILE"

usage()
{
  echo "$(basename "$0") usage:
  add   description...  Add new
  edit                  Open todo file in \$EDITOR
  done  todo_number     Remove from list (alias: \"remove\")
  list                  Show all. Default command."
}

with_line_numbers()
{
  nl -n rn -s': ' "$1"
}

remove_line_numbers()
{
  cut -d':' -f2- | sed -e 's/^[[:space:]]*//'
}

# With no argument display all todos
if [ "$#" -lt 1 ]; then
  # nl --number-format=rn -s': ' "$TODO_FILE"
  with_line_numbers "$TODO_FILE"
  exit 0
fi

case "$1" in
  add)
    shift 1
    echo "$@" >> "$TODO_FILE" ;;
  edit)
    shift 1
    $EDITOR "$TODO_FILE" || vi "$TODO_FILE" ;;
  done|remove)
    shift
    DATA=$(with_line_numbers "$TODO_FILE")
    NUM_GREP="^[[:space:]]*$1:"
    REMOVING=$(echo "$DATA" | grep "$NUM_GREP" | remove_line_numbers)
    if [ -z "$REMOVING" ]; then
      echo "$1 is not a valid to remove."
      exit 1
    else
      echo "Removing: $REMOVING"
    fi
    echo "$DATA" | grep -v "$NUM_GREP" | remove_line_numbers > "$TODO_FILE"
    ;;
  list)
    with_line_numbers "$TODO_FILE" ;;
  help)
    usage ;;
  *)
    usage
    exit 1 ;;
esac
