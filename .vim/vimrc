" General settings
  set mouse=a         " Give vim access to mouse input

  set nocompatible    " vim won't try to be vi
  set smartindent     " Make the indentation smarter (auto indent alternative)
  set ruler           " Display info on location inside open file

  set shiftwidth=2    " Number of spaces for each indent
  set tabstop=2       " Number of spaces a <Tab> stands for
  set expandtab       " Always insert spaces instead of tabs

  set splitbelow      " Open new split panes to
  set splitright      " the right and bottom

  set number          " Use normal numbers together with
  set relativenumber  " relative numbers as default

  set spell           " Enable spellcheck
  set spelllang=en    " Default to English

  filetype indent plugin on " Automatic, language-dependent indentation,
  syntax on                 " syntax coloring and other functionality.

  let mapleader="\<Space>"
  let maplocalleader="\\"

" Load plugins
  if &loadplugins
    if has('packages')
      packloadall
    else
      source $HOME/.vim/pack/bundle/opt/vim-pathogen/autoload/pathogen.vim
      call execute pathogen#infect('pack/bundle/start/{}')
    endif
  endif

" Dynamic line numbers: relative for current in normal otherwise normal
  :augroup numbertoggle
  :  autocmd!
  :  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  :  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
  :augroup END

" UltiSnips
  let g:UltiSnipsSnippetsDir = $HOME . '/.vim/ultisnips'
  let g:UltiSnipsSnippetDirectories = [$HOME . '/.vim/ultisnips']
  let g:UltiSnipsEditSplit = 'vertical'
  let g:UltiSnipsJumpForwardTrigger = "<Tab>"

  let g:ulti_expand_or_jump_res = 0
  function ExpandSnippetOrCarriageReturn()
      let snippet = UltiSnips#ExpandSnippetOrJump()
      if g:ulti_expand_or_jump_res > 0
          return snippet
      else
          return "\<CR>"
      endif
  endfunction
  inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"

" YouCompleteMe
  let g:ycm_autoclose_preview_window_after_completion = 1
  let g:ycm_key_list_select_completion = ['<Tab>', '<C-N>', '<Down>']
  let g:ycm_key_list_previous_completion = ['<S-Tab>', '<C-P>', '<Up>']

" iTerm settings
  if $TERM_PROGRAM =~ "iTerm.app"               " Change cursor to...
      let &t_EI = "\<Esc>]50;CursorShape=0\x7"  " Block in normal mode
      let &t_SI = "\<Esc>]50;CursorShape=1\x7"  " Vertical bar in insert mode
      let &t_SR = "\<Esc>]50;CursorShape=2\x7"  " Underline in replace mode
  endif

" C/C++ languages settings
  autocmd FileType c,cpp,h call SetCfamOptions()
  function SetCfamOptions()
    packadd vim-clang-format
    let g:clang_format#code_style = "google"
    let g:clang_format#style_options = {
      \ "AllowShortFunctionsOnASingleLine": "Empty" }
    ClangFormatAutoEnable
    let g:ycm_global_ycm_extra_conf = $HOME . '/.vim/.ycm_extra_conf.py'
  endfunction

" Remapping keys
  nnoremap <C-H> <C-w>h;
  nnoremap <C-J> <C-w>j;
  nnoremap <C-K> <C-w>k;
  nnoremap <C-L> <C-w>l;
